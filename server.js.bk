const path = require('path');
const webpack = require('webpack');
const express = require('express');
const compression = require('compression');
const devMiddleware = require('webpack-dev-middleware');
const hotMiddleware = require('webpack-hot-middleware');
const config = require('./webpack.config');

const bodyParser = require('body-parser');
const methodOverride = require('method-override');

const app = express();
app.use(compression());
const compiler = webpack(config);

app.use(devMiddleware(compiler, {
  publicPath: config.output.publicPath,
  historyApiFallback: true,
}));

app.use(hotMiddleware(compiler));
app.use(bodyParser.urlencoded({ extended: false }));
app.use(bodyParser.json());
app.use(methodOverride());

app.use(express.static(path.join(__dirname, 'public'), {
  extensions: ['gz'],
}));

app.get('*.js', (req, res, next) => {
  req.url = req.url + '.gz';
  res.set('Content-Encoding', 'gzip');
  next();
});

app.get('*', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

app.use(express.static(__dirname + '/static', { maxAge: 86400000 }));

const server = app.listen(3000, (err) => {
  if (err) {
    return console.error(err);
  }

  const host = server.address().address;
  const port = server.address().port;
  console.log('🌎  Listening at http://%s:%s', host, port);
  return 0;
});
